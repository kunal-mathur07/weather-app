{"version":3,"sources":["components/Button/index.js","components/CityContainer/index.js","utils/index.js","components/constants.js","components/Forecasts/index.js","api/constants.js","api/apiService.js","App.js","serviceWorker.js","index.js"],"names":["Button","handleKeyDown","e","key","props","onClick","this","className","onKeyPress","text","Component","TextBox","handleSubmit","type","value","onChange","placeholder","days","getDate","dateStr","date","Date","getDay","getTime","hours","getHours","mins","getMinutes","ImageUrls","Forecast","renderImage","renderCards","data","map","item","image","weather","description","dt_txt","replace","time","style","backgroundImage","backgroundSize","backgroundRepeat","main","temp","temp_max","temp_min","humidity","API_KEY","GetForecasts","city","a","fetch","resp","json","App","handleChange","setState","target","state","weatherData","list","error","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.27910352.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './style.css'\n\nclass Button extends Component{\n\n    handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.props.onClick();\n        }\n      }\n    render(){\n        return(\n            <div onClick={this.props.onClick} className=\"btn\" onKeyPress={this.handleKeyDown}>\n                <div>{this.props.text}</div>\n            </div>\n        )\n    }\n}\n\nexport default Button;","import React,{Component} from 'react';\nimport Button from '../Button';\n\nimport './style.css';\n\nclass TextBox extends Component{\n  \n    handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.props.handleSubmit();\n        }\n    }\n    render(){\n        return(\n            <div className=\"flex\">\n                <input type=\"text\" value={this.props.value} onChange={this.props.onChange} className=\"txtBox\" placeholder=\"City name\" onKeyPress={this.handleKeyDown}/>\n                <Button text=\"Get Forecast\" onClick={this.props.handleSubmit} />\n                \n            </div>\n        )\n    }\n}\n\n\nexport default TextBox;","const days=['Sunday', 'Monday', 'Tuesday','Wednesday','Thursday','Friday','Saturday'];\n\n\n\nexport function getDate(dateStr){\n    let date = new Date(dateStr);\n    return `${days[date.getDay()]}, ${date.getDate()}`\n}\n\n\nexport function getTime(dateStr){\n    let date = new Date(dateStr);\n    let hours = date.getHours();\n    let mins = date.getMinutes();\n\n    if(hours < 10){\n        hours = `0${hours}`;\n    }\n    if(mins < 10){\n        mins = `0${mins}`;\n    }\n    return `${hours}:${mins}`;\n}\n","export const ImageUrls={\n    overcast:\"https://images.unsplash.com/photo-1500740516770-92bd004b996e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1052&q=80\",\n    cloudy:\"https://images.unsplash.com/photo-1589486022941-a92fb1c4d8e5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\",\n    rain:\"https://images.unsplash.com/photo-1534274988757-a28bf1a57c17?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=675&q=80\",\n    clear: \"https://images.unsplash.com/photo-1575806418416-56d3047907fd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60\",\n    default:\"https://images.unsplash.com/photo-1522441815192-d9f04eb0615c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60\"\n}","import React,{Component} from 'react';\nimport {getDate ,getTime} from '../../utils';\nimport {ImageUrls} from '../constants';\n\nimport './style.css';\n\nclass Forecast extends Component{\n\n    renderImage=(type)=>{\n        switch(type){\n            case \"overcast clouds\":\n                return ImageUrls['overcast'];\n            case \"light rain\":\n            case \"moderate rain\":\n                return ImageUrls['rain'];\n            case \"clear sky\":\n                return ImageUrls['clear'];\n            case \"few clouds\":\n            case \"scattered clouds\":\n            case \"broken clouds\":\n                return ImageUrls['cloudy']\n            default:\n                return ImageUrls['default']\n        }\n\n    }\n\n\n\n    renderCards = ()=>{\n        const {data} = this.props;\n        return data.map((item)=>{\n            const image = this.renderImage(item.weather[0].description);\n            item.dt_txt = item.dt_txt.replace(' ','T');\n            const date = getDate(item.dt_txt);\n            const time = getTime(item.dt_txt);\n            return(\n                <div className=\"card\" style={{backgroundImage: `url(${image})`, backgroundSize:\"cover\", backgroundRepeat:\"no-repeat\"}}>\n                    <div className=\"heading\">\n                        <div>{date}</div>\n                        <div>{time}</div>\n                        <div>{item.main.temp}&#8451;</div>\n                        <div>{item.weather[0].description}</div>\n                    </div>\n                    <div className=\"item\">\n                        <div>Max Temp</div>\n                        <div>{item.main.temp_max}&#8451;</div>\n                    </div>\n                    <div className=\"item\">\n                        <div>Min Temp</div>\n                        <div>{item.main.temp_min}&#8451;</div>\n                    </div>\n                    <div className=\"item\">\n                        <div>Humidity</div>\n                        <div>{item.main.humidity} %</div>\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    render(){\n\n        return (\n            <div className=\"forecastCards\">\n                {this.renderCards()}\n            </div>\n        )\n    }\n}\n\n\nexport default Forecast;","export const API_KEY=\"fd29808cb3cfaf796fc92e7802023094\";","import {API_KEY} from './constants';\nexport async function GetForecasts(city){\n    try{\n        let resp = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`)\n        return await resp.json();\n    }catch(e){\n        throw e;\n    }\n}","import React, { Component } from 'react';\nimport TextBox from './components/CityContainer';\n\nimport Forecast from './components/Forecasts';\nimport {GetForecasts} from './api/apiService';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n      super(props);\n      this.state={\n        city:'',\n        weatherData:[],\n        error:null\n      }\n  }\n  handleChange = (e)=>{\n    this.setState({\n      city: e.target.value\n    })\n  }\n  handleSubmit=async()=>{\n      try{\n        let data = await GetForecasts(this.state.city);\n        this.setState({\n          weatherData : [...data.list],\n          error:null\n        })\n    }catch(e){\n        this.setState({\n           error: 'No results found for the city'\n        })\n    }\n\n  }\n  render(){\n    const {weatherData,error, city} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"cityForm\">\n          <TextBox onChange={this.handleChange} value={city} handleSubmit={this.handleSubmit}/>\n          \n          \n        </div>\n        {weatherData.length > 0 && !error &&  <Forecast data = {weatherData}/>}\n\n          {error && <div className=\"error\">{error}</div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}